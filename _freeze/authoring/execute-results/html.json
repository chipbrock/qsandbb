{
  "hash": "d19e0c8550185a632f41e23c13f33398",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Authoring Page\"\ndraft: true\n---\n\n\n\n\n## Colors\n\n- Red\n- Green \n- Blue\n\n## Shapes\n\n- Square\n- Circle\n- Triangle\n\n## Overview\n\n## Overview\n\nSee @fig-simple in @sec-plot for a demonstration of a simple plot. \n\nSee @eq-stddev to better understand standard deviation.\n\n## Plot {#sec-plot}\n\n::: {#cell-fig-simple .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Simple Plot](authoring_files/figure-html/fig-simple-output-1.png){#fig-simple width=566 height=411}\n:::\n:::\n\n\n## Equation {#sec-equation}\n\n$$\ns = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N (x_i - \\overline{x})^2}\n$$ {#eq-stddev}\n\nKnuth says always be literate [@knuth1984].\n\n::: {#c1897338 .cell execution_count=3}\n``` {.python .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n2\n```\n:::\n:::\n\n\n## Textures\n\n- Smooth\n- Bumpy\n- Fuzzy\n  \nEinstein's theory of special relatively that expresses the equivalence of mass and energy:\n$E = mc^{2}$\n$$F=ma$$\n\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n## Placing Colorbars\n\nColorbars indicate the quantitative extent of image data.\nPlacing in a figure is non-trivial because room needs to\nbe made for them. The simplest case is just attaching a \ncolorbar to each axes:^[See the [Matplotlib Gallery](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/colorbar_placement.html) to explore colorbars further].\n\n::: {#f8ee140c .cell .column-screen-inset execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2)\nfig.set_size_inches(20, 8)\ncmaps = ['RdBu_r', 'viridis']\nfor col in range(2):\n    for row in range(2):\n        ax = axs[row, col]\n        pcm = ax.pcolormesh(\n          np.random.random((20, 20)) * (col + 1),\n          cmap=cmaps[col]\n        )\n        fig.colorbar(pcm, ax=ax)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](authoring_files/figure-html/cell-4-output-1.png){width=1497 height=638}\n:::\n:::\n\n\n## References\n\n",
    "supporting": [
      "authoring_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}